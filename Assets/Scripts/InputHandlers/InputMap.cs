//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputHandlers/InputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputHandlers
{
    public partial class @InputMap: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputMap()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMap"",
    ""maps"": [
        {
            ""name"": ""TetrominoControl"",
            ""id"": ""c9e6ee3f-7519-4dde-ae3d-95649e120767"",
            ""actions"": [
                {
                    ""name"": ""Moved"",
                    ""type"": ""Button"",
                    ""id"": ""a0c99863-c6b7-415d-a79b-14bba249543f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotated"",
                    ""type"": ""Button"",
                    ""id"": ""89cb707f-272e-4097-8f69-27f4a0ccabea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis(A-D)"",
                    ""id"": ""ca861899-d194-42be-8912-1d77ec472c8e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moved"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1f042dd2-ceff-413a-a04b-cd5634230214"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moved"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8fbc113e-3cf8-4eae-b85f-c3ff7498ffb0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moved"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""11325908-aa58-43d8-a253-52fc14168605"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotated"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cc4152f4-a98a-468c-800e-fcdd6c96ce4b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotated"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f891ae6c-ccbf-49a2-838c-4721ab62d00b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotated"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // TetrominoControl
            m_TetrominoControl = asset.FindActionMap("TetrominoControl", throwIfNotFound: true);
            m_TetrominoControl_Moved = m_TetrominoControl.FindAction("Moved", throwIfNotFound: true);
            m_TetrominoControl_Rotated = m_TetrominoControl.FindAction("Rotated", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // TetrominoControl
        private readonly InputActionMap m_TetrominoControl;
        private List<ITetrominoControlActions> m_TetrominoControlActionsCallbackInterfaces = new List<ITetrominoControlActions>();
        private readonly InputAction m_TetrominoControl_Moved;
        private readonly InputAction m_TetrominoControl_Rotated;
        public struct TetrominoControlActions
        {
            private @InputMap m_Wrapper;
            public TetrominoControlActions(@InputMap wrapper) { m_Wrapper = wrapper; }
            public InputAction @Moved => m_Wrapper.m_TetrominoControl_Moved;
            public InputAction @Rotated => m_Wrapper.m_TetrominoControl_Rotated;
            public InputActionMap Get() { return m_Wrapper.m_TetrominoControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TetrominoControlActions set) { return set.Get(); }
            public void AddCallbacks(ITetrominoControlActions instance)
            {
                if (instance == null || m_Wrapper.m_TetrominoControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TetrominoControlActionsCallbackInterfaces.Add(instance);
                @Moved.started += instance.OnMoved;
                @Moved.performed += instance.OnMoved;
                @Moved.canceled += instance.OnMoved;
                @Rotated.started += instance.OnRotated;
                @Rotated.performed += instance.OnRotated;
                @Rotated.canceled += instance.OnRotated;
            }

            private void UnregisterCallbacks(ITetrominoControlActions instance)
            {
                @Moved.started -= instance.OnMoved;
                @Moved.performed -= instance.OnMoved;
                @Moved.canceled -= instance.OnMoved;
                @Rotated.started -= instance.OnRotated;
                @Rotated.performed -= instance.OnRotated;
                @Rotated.canceled -= instance.OnRotated;
            }

            public void RemoveCallbacks(ITetrominoControlActions instance)
            {
                if (m_Wrapper.m_TetrominoControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITetrominoControlActions instance)
            {
                foreach (var item in m_Wrapper.m_TetrominoControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TetrominoControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TetrominoControlActions @TetrominoControl => new TetrominoControlActions(this);
        public interface ITetrominoControlActions
        {
            void OnMoved(InputAction.CallbackContext context);
            void OnRotated(InputAction.CallbackContext context);
        }
    }
}
